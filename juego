<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medellín: El Gran Recorrido Histórico con Cosiaca</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* Estilos generales del cuerpo y el contenedor del juego */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
            overflow: auto; /* Permite desplazamiento si el contenido es muy grande */
        }
        .game-container {
            background-color: #ffffff;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 20px;
            max-width: 1200px;
            width: 100%;
            height: auto; /* Altura automática para adaptarse al contenido */
            min-height: calc(100vh - 40px); /* Altura mínima para pantallas grandes */
        }
        .game-header {
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 2px solid #e0e0e0;
        }
        .game-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 10px;
        }
        .game-subtitle {
            font-size: 1.2rem;
            color: #666;
        }
        .game-area {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .board-and-info {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr)); /* Cuadrícula responsiva para las casillas */
            gap: 5px;
            background-color: #e6f7ff; /* Fondo azul claro para el tablero */
            padding: 10px;
            border-radius: 10px;
            border: 2px solid #a0d9ff;
        }
        .square {
            width: 80px;
            height: 80px;
            background-color: #ffffff;
            border: 1px solid #ccc;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start; /* Alinea contenido al inicio */
            align-items: center;
            font-size: 0.7rem;
            text-align: center;
            position: relative;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease-in-out;
            cursor: pointer;
            overflow: hidden; /* Ocultar desbordamiento para el texto */
            padding-top: 5px; /* Espacio para el icono/imagen */
        }
        .square.highlight {
            border: 2px solid #4CAF50; /* Resaltar para casillas movibles */
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }
        .square.current-player-highlight {
            border: 2px solid #FFC107; /* Resaltar para la ficha del jugador actual */
            box-shadow: 0 0 10px rgba(255, 193, 7, 0.5);
        }
        /* Estilos específicos para tipos de casillas */
        .square.start-zone {
            background-color: #d4edda; /* Verde claro */
            border-color: #28a745;
            font-weight: bold;
            color: #155724;
        }
        .square.goal-zone {
            background-color: #fff3cd; /* Amarillo claro */
            border-color: #ffc107;
            font-weight: bold;
            color: #856404;
        }
        .square.historical {
            background-color: #f8f9fa;
        }
        .square.cosiaca {
            background-color: #ffe0b2; /* Naranja claro */
            border-color: #ff9800;
        }
        .square.event {
            background-color: #e1f5fe; /* Azul claro */
            border-color: #2196f3;
        }
        .square.safe {
            background-color: #c8e6c9; /* Verdoso */
            border-color: #4caf50;
        }
        .square.jail {
            background-color: #ffcdd2; /* Rojo claro */
            border-color: #f44336;
        }
        .square-emoji { /* Nuevo estilo para emojis */
            font-size: 1.8rem; /* Tamaño más grande para emojis */
            margin-bottom: 5px;
            line-height: 1; /* Ajustar altura de línea para emojis */
        }
        .square-text {
            line-height: 1.2;
            font-size: 0.65rem;
            color: #555;
        }
        .tokens-container {
            position: absolute; /* Posiciona el contenedor de tokens en la parte inferior */
            bottom: 5px;
            left: 5px;
            right: 5px;
            display: flex;
            flex-wrap: wrap; /* Permite que las fichas se envuelvan si hay muchas */
            gap: 2px; /* Pequeño espacio entre fichas */
            justify-content: center; /* Centra las fichas horizontalmente */
            align-items: flex-end; /* Alinea las fichas a la parte inferior del contenedor */
            width: calc(100% - 10px); /* Ajusta el ancho para el padding */
            height: 30px; /* Da un poco de altura para posicionar las fichas */
        }
        .token {
            width: 20px; /* Fichas ligeramente más pequeñas para que quepan más */
            height: 20px;
            border-radius: 50%;
            position: static; /* Elimina el posicionamiento absoluto de las fichas individuales */
            border: 2px solid rgba(0, 0, 0, 0.2);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 0.7rem;
            font-weight: bold;
            color: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease-in-out;
        }
        .token.p1 { background-color: #ef4444; } /* Rojo */
        .token.p2 { background-color: #3b82f6; } /* Azul */
        .token.p3 { background-color: #22c55e; } /* Verde */
        .token.p4 { background-color: #f97316; } /* Naranja */
        .jail-turns-indicator {
            font-size: 0.6rem;
            color: white;
            background-color: rgba(0, 0, 0, 0.5);
            border-radius: 3px;
            padding: 1px 3px;
            margin-left: 2px;
        }

        /* Información del jugador */
        .player-info {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            justify-content: center;
        }
        .player-card {
            background-color: #f0f9ff;
            border: 1px solid #d0e9ff;
            border-radius: 10px;
            padding: 15px;
            width: 200px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        .player-card.active {
            border-color: #007bff;
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.4); /* Sombra más fuerte */
            transform: translateY(-5px) scale(1.02); /* Ligeramente más grande y levantada */
            background-color: #e0f2ff; /* Fondo azul más claro */
        }
        .player-color-box {
            width: 30px;
            height: 30px;
            border-radius: 5px;
            margin: 0 auto 10px;
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        .player-name {
            font-weight: bold;
            color: #333;
            margin-bottom: 5px;
        }
        .player-tokens-out, .player-tokens-goal {
            font-size: 0.9rem;
            color: #555;
        }

        /* Controles del juego */
        .controls {
            display: flex;
            flex-direction: column;
            gap: 15px;
            align-items: center;
        }
        .dice-container {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
        }
        .die {
            width: 60px;
            height: 60px;
            background-color: #fefefe;
            border: 2px solid #333;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #333;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
            transition: transform 0.1s ease-out;
        }
        .die.rolling {
            animation: shake 0.2s infinite;
        }
        @keyframes shake {
            0% { transform: translate(1px, 1px) rotate(0deg); }
            25% { transform: translate(-1px, -2px) rotate(-1deg); }
            50% { transform: translate(-3px, 0px) rotate(1deg); }
            75% { transform: translate(1px, 2px) rotate(0deg); }
            100% { transform: translate(1px, -1px) rotate(-1deg); }
        }

        .action-button {
            background-color: #007bff;
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
            box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
        }
        .action-button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 123, 255, 0.4);
        }
        .action-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            box-shadow: none;
            transform: none;
        }

        .message-box {
            background-color: #e9f7ef;
            border: 1px solid #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-size: 1rem;
            margin-top: 15px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold; /* Texto más negrita */
            border-left: 8px solid #4CAF50; /* Borde izquierdo prominente */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra sutil */
        }

        /* Modal para mensajes y acciones de cartas */
        .modal {
            display: none; /* Oculto por defecto */
            position: fixed; /* Posición fija */
            z-index: 1000; /* Siempre encima */
            left: 0;
            top: 0;
            width: 100%; /* Ancho completo */
            height: 100%; /* Alto completo */
            overflow: auto; /* Habilitar desplazamiento si es necesario */
            background-color: rgba(0,0,0,0.6); /* Fondo semi-transparente */
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 500px;
            text-align: center;
            position: relative;
        }
        .modal-title {
            font-size: 1.8rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
        }
        .modal-body {
            font-size: 1.1rem;
            color: #555;
            margin-bottom: 25px;
            line-height: 1.5;
        }
        .modal-actions button {
            background-color: #28a745;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            margin: 0 10px;
            transition: background-color 0.3s ease;
        }
        .modal-actions button:hover {
            background-color: #218838;
        }
        .modal-actions button.cancel {
            background-color: #dc3545;
        }
        .modal-actions button.cancel:hover {
            background-color: #c82333;
        }

        /* Estilos para la imagen de Cosiaca */
        .cosiaca-image {
            width: 60px; /* Tamaño de la imagen en la casilla */
            height: 60px;
            object-fit: contain;
            margin-bottom: 5px;
            border-radius: 5px;
        }
        .modal-cosiaca-image {
            max-width: 150px;
            height: auto;
            margin-bottom: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .modal-loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Ajustes responsivos */
        @media (min-width: 768px) {
            .game-area {
                flex-direction: row;
                justify-content: space-between;
            }
            .board-and-info {
                flex-direction: row;
                flex-grow: 1;
            }
            .board {
                grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
                flex-grow: 1;
            }
            .player-info {
                flex-direction: column;
                flex-wrap: nowrap;
                width: 220px; /* Ancho fijo para tarjetas de jugador en pantallas grandes */
            }
            .player-card {
                width: auto;
            }
            .controls {
                width: 250px;
            }
        }
        @media (max-width: 767px) {
            .game-container {
                padding: 15px;
            }
            .game-title {
                font-size: 1.8rem;
            }
            .game-subtitle {
                font-size: 1rem;
            }
            .board {
                grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
                gap: 3px;
            }
            .square {
                width: 60px;
                height: 60px;
                font-size: 0.6rem;
            }
            .square-emoji { /* Ajuste para emojis en pantallas pequeñas */
                font-size: 1.5rem;
            }
            .square-text {
                font-size: 0.55rem;
            }
            .token {
                width: 20px;
                height: 20px;
                font-size: 0.7rem;
            }
            .player-card {
                width: 100%;
            }
            .dice-container .die {
                width: 50px;
                height: 50px;
                font-size: 2rem;
            }
            .action-button {
                padding: 10px 20px;
                font-size: 1rem;
            }
            .cosiaca-image {
                width: 40px;
                height: 40px;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="game-header">
            <h1 class="game-title">Medellín: El Gran Recorrido Histórico con Cosiaca</h1>
            <p class="game-subtitle">¡Un paseo de 350 años por la historia de la Ciudad de la Eterna Primavera!</p>
        </div>

        <div class="game-area">
            <div class="board-and-info">
                <div id="player-info" class="player-info">
                    <!-- Las tarjetas de jugador se renderizarán aquí -->
                </div>
                <div id="game-board" class="board">
                    <!-- Las casillas del tablero se renderizarán aquí -->
                </div>
            </div>

            <div class="controls">
                <div class="dice-container">
                    <div id="die1" class="die">1</div>
                    <div id="die2" class="die">1</div>
                </div>
                <button id="roll-dice-button" class="action-button">Lanzar Dados</button>
                <div id="message-box" class="message-box">¡Bienvenido a Medellín: El Gran Recorrido Histórico con Cosiaca! Lanza los dados para empezar.</div>
            </div>
        </div>
    </div>

    <!-- Modal para acciones de cartas y mensajes -->
    <div id="game-modal" class="modal">
        <div class="modal-content">
            <img id="modal-image" class="modal-cosiaca-image hidden" src="" alt="Imagen de Cosiaca">
            <h2 id="modal-title" class="modal-title"></h2>
            <div id="modal-loading" class="modal-loading-spinner hidden"></div>
            <p id="modal-body" class="modal-body"></p>
            <div id="modal-actions" class="modal-actions">
                <!-- Botones para acciones del modal -->
            </div>
        </div>
    </div>

    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase configuration and initialization
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // Global variables for game state and Firebase
        const die1El = document.getElementById('die1');
        const die2El = document.getElementById('die2');
        const rollDiceButton = document.getElementById('roll-dice-button');
        const messageBox = document.getElementById('message-box');
        const gameBoardEl = document.getElementById('game-board');
        const playerInfoEl = document.getElementById('player-info');
        const gameModal = document.getElementById('game-modal');
        const modalTitleEl = document.getElementById('modal-title');
        const modalBodyEl = document.getElementById('modal-body');
        const modalActionsEl = document.getElementById('modal-actions');
        const modalImageEl = document.getElementById('modal-image');
        const modalLoadingEl = document.getElementById('modal-loading');

        const NUM_CELLS = 60; // Total number of cells on the board (doubled from 30)
        const NUM_PLAYERS = 4; // Number of players

        const game = {
            players: [],
            currentPlayerIndex: 0,
            diceRoll: [1, 1],
            message: '',
            gameStarted: false,
            turnPhase: 'rollDice', // 'rollDice', 'selectToken', 'cardAction', 'endTurn'
            tokensToMove: 0, // Usado para dobles
            doubleRollsCount: 0, // Para la regla de 3 dobles consecutivos
            jailTurns: {}, // {playerId: {tokenId: turnsLeft}} para "La Comisaría"
            board: [], // Definido abajo
            encuentroCards: [], // Definido abajo
            eventosCards: [], // Definido abajo
            playerColors: ['#ef4444', '#3b82f6', '#22c55e', '#f97316'], // Rojo, Azul, Verde, Naranja
            playerNames: ['Familia Roja', 'Familia Azul', 'Familia Verde', 'Familia Naranja'],
            numPlayers: 2, // Número predeterminado de jugadores
        };

        let userId = null;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        // --- Definiciones de datos del juego ---

        // Casillas del tablero (ampliadas al doble)
        game.board = [
            // I. Los Orígenes y la Colonia (Siglo XVII - XVIII)
            { id: 's0', type: 'start-zone', text: 'Casa Paisa (Salida)', emoji: '🏠', image: '' },
            { id: 's1', type: 'historical', text: 'Resguardo Indígena de El Poblado (1616)', emoji: '🌳', image: '', factPrompt: 'Resguardo Indígena de El Poblado (1616)' },
            { id: 's2', type: 'historical', text: 'Caserío de Ana (1649)', emoji: '🏡', image: '', factPrompt: 'Caserío de Ana (1649)' },
            { id: 's3', type: 'historical', text: 'Erección de la Villa de la Candelaria (1675)', emoji: '🏙️', image: '', factPrompt: 'Erección de la Villa de la Candelaria (1675)' },
            { id: 's4', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's5', type: 'historical', text: 'Construcción de la Iglesia de la Candelaria (1767)', emoji: '⛪', image: '', factPrompt: 'Construcción de la Iglesia de la Candelaria (1767)' },
            { id: 's6', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's7', type: 'historical', text: 'Apertura del Camino de Quindío (1790)', emoji: '🛣️', image: '', factPrompt: 'Apertura del Camino de Quindío (1790)' },
            { id: 's8', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's9', type: 'historical', text: 'Fundación del Jardín Botánico (1799)', emoji: '🌿', image: '', factPrompt: 'Fundación del Jardín Botánico (1799)' },

            // II. La Independencia y el Siglo XIX
            { id: 's10', type: 'historical', text: 'Declaración de Independencia de Antioquia (1813)', emoji: '🚩', image: '', factPrompt: 'Declaración de Independencia de Antioquia (1813)' },
            { id: 's11', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's12', type: 'historical', text: 'Batalla de Chorros Blancos (1815)', emoji: '✊', image: '', factPrompt: 'Batalla de Chorros Blancos (1815)' },
            { id: 's13', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's14', type: 'historical', text: 'Creación de la Universidad de Antioquia (1822)', emoji: '🎓', image: '', factPrompt: 'Creación de la Universidad de Antioquia (1822)' },
            { id: 's15', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's16', type: 'historical', text: 'Llegada del Ferrocarril de Antioquia (1875)', emoji: '🚂', image: '', factPrompt: 'Llegada del Ferrocarril de Antioquia (1875)' },
            { id: 's17', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's18', type: 'historical', text: 'Construcción del Puente de Occidente (1887)', emoji: '🌉', image: '', factPrompt: 'Construcción del Puente de Occidente (1887)' },
            { id: 's19', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },

            // III. El Siglo XX: Industrialización y Modernización (Primera Mitad)
            { id: 's20', type: 'historical', text: 'Fundación de Empresas Públicas de Medellín (1901)', emoji: '🏭', image: '', factPrompt: 'Fundación de Empresas Públicas de Medellín (1901)' },
            { id: 's21', type: 'historical', text: 'Inauguración del Teatro Junín (1924)', emoji: '🎭', image: '', factPrompt: 'Inauguración del Teatro Junín (1924)' },
            { id: 's22', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's23', type: 'historical', text: 'Creación del Metro de Medellín (1984)', emoji: '🚇', image: '', factPrompt: 'Creación del Metro de Medellín (1984)' },
            { id: 's24', type: 'jail', text: 'La Comisaría', emoji: '🚨', image: 'https://raw.githubusercontent.com/NucleoColectivo/Cosiaca/main/IMG/13.png' }, // Casilla de "La Comisaría"
            { id: 's25', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's26', type: 'historical', text: 'Transformación Urbana: Parques Biblioteca (2000s)', emoji: '📚', image: '', factPrompt: 'Transformación Urbana: Parques Biblioteca (2000s)' },
            { id: 's27', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's28', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's29', type: 'historical', text: 'Fundación de EAFIT (1960)', emoji: '👨‍🎓', image: '', factPrompt: 'Fundación de EAFIT (1960)' },

            // IV. El Siglo XX: Transformación y Desafíos (Segunda Mitad) - Nuevas casillas
            { id: 's30', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's31', type: 'historical', text: 'Construcción del Edificio Coltejer (1972)', emoji: '🏢', image: '', factPrompt: 'Construcción del Edificio Coltejer (1972)' },
            { id: 's32', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's33', type: 'historical', text: 'Creación de Ruta N (2009)', emoji: '💡', image: '', factPrompt: 'Creación de Ruta N (2009)' },
            { id: 's34', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's35', type: 'historical', text: 'Inauguración del Parque Explora (2007)', emoji: '🧪', image: '', factPrompt: 'Inauguración del Parque Explora (2007)' },
            { id: 's36', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's37', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's38', type: 'historical', text: 'Juegos Suramericanos (2010)', emoji: '🏅', image: '', factPrompt: 'Juegos Suramericanos (2010)' },
            { id: 's39', type: 'jail', text: 'La Comisaría', emoji: '🚨', image: 'https://raw.githubusercontent.com/NucleoColectivo/Cosiaca/main/IMG/13.png' },

            // V. Siglo XXI: Innovación y Futuro - Nuevas casillas
            { id: 's40', type: 'historical', text: 'Construcción del Tranvía de Ayacucho (2015)', emoji: '🚊', image: '', factPrompt: 'Construcción del Tranvía de Ayacucho (2015)' },
            { id: 's41', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's42', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's43', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's44', type: 'historical', text: 'Medellín, Ciudad Más Innovadora (2013)', emoji: '🏆', image: '', factPrompt: 'Medellín, Ciudad Más Innovadora (2013)' },
            { id: 's45', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's46', type: 'historical', text: 'Desarrollo del Distrito de la Innovación (Actual)', emoji: '⚙️', image: '', factPrompt: 'Desarrollo del Distrito de la Innovación (Actual)' },
            { id: 's47', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's48', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's49', type: 'historical', text: 'Inauguración del Centro Botánico (2008)', emoji: '🌱', image: '', factPrompt: 'Inauguración del Centro Botánico (2008)' },

            // VI. Tramo Final y Celebraciones - Nuevas casillas
            { id: 's50', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's51', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's52', type: 'historical', text: 'Ampliación del Parque del Río (Reciente)', emoji: '🌊', image: '', factPrompt: 'Ampliación del Parque del Río (Reciente)' },
            { id: 's53', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's54', type: 'event', text: 'Eventos de la Ciudad', emoji: '🗓️', image: '' },
            { id: 's55', type: 'historical', text: 'Celebración de los 350 años de Medellín', emoji: '🎂', image: '', factPrompt: 'Celebración de los 350 años de Medellín' },
            { id: 's56', type: 'cosiaca', text: 'Encuentro con la Historia', emoji: '🤠', image: 'https://placehold.co/60x60/FF9800/FFFFFF?text=Cosiaca', factPrompt: 'Cosiaca' },
            { id: 's57', type: 'jail', text: 'La Comisaría', emoji: '🚨', image: 'https://raw.githubusercontent.com/NucleoColectivo/Cosiaca/main/IMG/13.png' },
            { id: 's58', type: 'safe', text: 'Seguro', emoji: '🛡️', image: '' },
            { id: 's59', type: 'goal-zone', text: 'Parque del Río (Meta)', emoji: '🏁', image: '' }
        ];

        // Tarjetas de Encuentro con la Historia (Cosiaca) - Duplicadas para más variedad
        game.encuentroCards = [
            {
                title: "¡Cosiaca te cuenta un chiste!",
                description: "Un chiste de Cosiaca te dejó pensando demasiado. ¡Te quedaste enredao! Pierdes 1 turno tratando de entenderlo.",
                action: (player, token) => {
                    token.inJail = true;
                    game.jailTurns[player.id][token.id] = 1;
                    updateMessageBox(`¡${player.name} pierde 1 turno con ficha ${token.id.slice(-1)}!`);
                    renderBoard();
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Chiste'
            },
            {
                title: "¡Cosiaca te invita a un tinto!",
                description: "¡Se te regó el tinto encima de la ropa! ¡Qué embarrada! Retrocede 1 casilla para limpiarte.",
                action: (player, token) => {
                    moveToken(player, token.id, -1);
                    updateMessageBox(`¡${player.name} retrocede 1 casilla con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Tinto'
            },
            {
                title: "¡Cosiaca te da un consejo paisa!",
                description: "Un consejo de Cosiaca te ilumina el camino. ¡Avanza 2 casillas por avispao!",
                action: (player, token) => {
                    moveToken(player, token.id, 2);
                    updateMessageBox(`¡${player.name} avanza 2 casillas con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Consejo'
            },
            {
                title: "¡Cosiaca te reta a una trova!",
                description: "Te enredaste en una trova con Cosiaca. ¡Pierdes 1 turno buscando la rima!",
                action: (player, token) => {
                    token.inJail = true;
                    game.jailTurns[player.id][token.id] = 1;
                    updateMessageBox(`¡${player.name} pierde 1 turno con ficha ${token.id.slice(-1)}!`);
                    renderBoard();
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Trova'
            },
            {
                title: "¡Cosiaca te da un empujón!",
                description: "Cosiaca te da un empujón de la buena suerte. ¡Avanza 1 casilla!",
                action: (player, token) => {
                    moveToken(player, token.id, 1);
                    updateMessageBox(`¡${player.name} avanza 1 casilla con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Empujon'
            },
            {
                title: "¡Cosiaca te confunde!",
                description: "¡Te confundiste de fecha y llegaste tarde a una cita! ¡Más desubicado que un pingüino en el trópico! Retrocede 2 casillas.",
                action: (player, token) => {
                    moveToken(player, token.id, -2);
                    updateMessageBox(`¡${player.name} retrocede 2 casillas con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Confuso'
            },
            {
                title: "¡Cosiaca te da un 'chance'!",
                description: "Cosiaca te da un 'chance' para que llegues a tiempo. ¡Avanza hasta la próxima casilla de 'Seguro'!",
                action: (player, token) => {
                    const currentPos = token.position;
                    let nextSafe = -1;
                    for (let i = currentPos + 1; i < game.board.length; i++) {
                        if (game.board[i].type === 'safe') {
                            nextSafe = i;
                            break;
                        }
                    }
                    if (nextSafe !== -1) {
                        const distance = nextSafe - currentPos;
                        moveToken(player, token.id, distance);
                        updateMessageBox(`¡${player.name} avanza a la próxima casilla de Seguro con ficha ${token.id.slice(-1)}!`);
                    } else {
                        updateMessageBox(`No hay casillas de Seguro adelante para ${player.name}.`);
                    }
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Chance'
            },
            // Duplicados para más variedad en un tablero más grande
            {
                title: "¡Cosiaca te hace reír!",
                description: "La risa de Cosiaca es contagiosa. ¡Avanza 1 casilla por la alegría!",
                action: (player, token) => {
                    moveToken(player, token.id, 1);
                    updateMessageBox(`¡${player.name} avanza 1 casilla con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Risa'
            },
            {
                title: "¡Cosiaca te da un empujón extra!",
                description: "Cosiaca te da un empujón de la buena suerte. ¡Avanza 3 casillas!",
                action: (player, token) => {
                    moveToken(player, token.id, 3);
                    updateMessageBox(`¡${player.name} avanza 3 casillas con ficha ${token.id.slice(-1)}!`);
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Empujon+Extra'
            },
            {
                title: "¡Cosiaca te distrae!",
                description: "¡Te quedaste mirando a Cosiaca! Pierdes 1 turno por la distracción.",
                action: (player, token) => {
                    token.inJail = true;
                    game.jailTurns[player.id][token.id] = 1;
                    updateMessageBox(`¡${player.name} pierde 1 turno con ficha ${token.id.slice(-1)}!`);
                    renderBoard();
                },
                image: 'https://placehold.co/150x150/FF9800/FFFFFF?text=Cosiaca+Distraido'
            }
        ];

        // Tarjetas de Eventos de la Ciudad - Duplicadas para más variedad
        game.eventosCards = [
            {
                title: "Feria de las Flores",
                description: "¡Estás en la Feria de las Flores! ¡Qué belleza! Avanza 3 casillas para disfrutar del desfile de silleteros.",
                action: (player, token) => {
                    moveToken(player, token.id, 3);
                    updateMessageBox(`¡${player.name} avanza 3 casillas con ficha ${token.id.slice(-1)} por la Feria de las Flores!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Feria+Flores'
            },
            {
                title: "Alumbrados Navideños",
                description: "¡Te deslumbraron los Alumbrados Navideños! Pierdes 1 turno admirando tanta luz.",
                action: (player, token) => {
                    token.inJail = true;
                    game.jailTurns[player.id][token.id] = 1;
                    updateMessageBox(`¡${player.name} pierde 1 turno con ficha ${token.id.slice(-1)} por los Alumbrados!`);
                    renderBoard();
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Alumbrados'
            },
            {
                title: "Festival Internacional de Poesía",
                description: "La poesía te envolvió. Avanza 1 casilla para inspirarte con los versos.",
                action: (player, token) => {
                    moveToken(player, token.id, 1);
                    updateMessageBox(`¡${player.name} avanza 1 casilla con ficha ${token.id.slice(-1)} por la poesía!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Poesia'
            },
            {
                title: "Semana de la Moda",
                description: "¡Te quedaste pegado en la Semana de la Moda! Retrocede 1 casilla para no perderte ningún detalle.",
                action: (player, token) => {
                    moveToken(player, token.id, -1);
                    updateMessageBox(`¡${player.name} retrocede 1 casilla con ficha ${token.id.slice(-1)} por la Semana de la Moda!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Moda'
            },
            {
                title: "Clásico Paisa (Fútbol)",
                description: "¡El clásico paisa te llenó de emoción! Avanza 2 casillas celebrando el gol.",
                action: (player, token) => {
                    moveToken(player, token.id, 2);
                    updateMessageBox(`¡${player.name} avanza 2 casillas con ficha ${token.id.slice(-1)} por el Clásico Paisa!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Futbol'
            },
            // Duplicados para más variedad en un tablero más grande
            {
                title: "Desfile de Silleteros",
                description: "¡El desfile de silleteros te dejó sin aliento! Avanza 2 casillas para ver mejor.",
                action: (player, token) => {
                    moveToken(player, token.id, 2);
                    updateMessageBox(`¡${player.name} avanza 2 casillas con ficha ${token.id.slice(-1)} por el desfile de silleteros!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Silleteros'
            },
            {
                title: "Concierto en el Estadio",
                description: "¡Un concierto te dejó sordo! Pierdes 1 turno recuperando el oído.",
                action: (player, token) => {
                    token.inJail = true;
                    game.jailTurns[player.id][token.id] = 1;
                    updateMessageBox(`¡${player.name} pierde 1 turno con ficha ${token.id.slice(-1)} por el concierto!`);
                    renderBoard();
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Concierto'
            },
            {
                title: "Visita al Jardín Botánico",
                description: "La belleza del Jardín Botánico te hace reflexionar. Retrocede 1 casilla para meditar.",
                action: (player, token) => {
                    moveToken(player, token.id, -1);
                    updateMessageBox(`¡${player.name} retrocede 1 casilla con ficha ${token.id.slice(-1)} por el Jardín Botánico!`);
                },
                image: 'https://placehold.co/150x150/2196f3/FFFFFF?text=Jardin+Botanico'
            }
        ];

        /**
         * Inicializa los jugadores del juego.
         * Cada jugador tiene un nombre, color, fichas (tokens) y un estado de juego.
         */
        function initializePlayers() {
            game.players = [];
            game.jailTurns = {}; // Reinicializa el objeto jailTurns principal
            for (let i = 0; i < game.numPlayers; i++) {
                const newPlayer = {
                    id: `p${i + 1}`,
                    name: game.playerNames[i],
                    color: game.playerColors[i],
                    tokens: [
                        { id: `p${i + 1}t1`, position: 0, inGoal: false, inJail: false },
                        { id: `p${i + 1}t2`, position: 0, inGoal: false, inJail: false },
                        { id: `p${i + 1}t3`, position: 0, inGoal: false, inJail: false },
                        { id: `p${i + 1}t4`, position: 0, inGoal: false, inJail: false }
                    ],
                    tokensInGoal: 0,
                    selectedTokenId: null, // Ficha seleccionada para mover
                };
                game.players.push(newPlayer);
                game.jailTurns[newPlayer.id] = {}; // Inicializa el sub-objeto para las fichas encarceladas de cada jugador
            }
            game.currentPlayerIndex = 0; // Siempre empieza el jugador 0
            game.gameStarted = true;
            renderPlayerInfo();
            renderBoard();
        }

        /**
         * Renderiza la información de cada jugador (tarjetas de jugador).
         */
        function renderPlayerInfo() {
            playerInfoEl.innerHTML = '';
            game.players.forEach((player, index) => {
                const playerCard = document.createElement('div');
                playerCard.className = `player-card ${index === game.currentPlayerIndex ? 'active' : ''}`;
                playerCard.innerHTML = `
                    <div class="player-color-box" style="background-color: ${player.color};"></div>
                    <div class="player-name">${player.name}</div>
                    <div class="player-tokens-out">Fichas en juego: ${player.tokens.filter(t => !t.inGoal).length}</div>
                    <div class="player-tokens-goal">Fichas en meta: ${player.tokensInGoal}</div>
                `;
                playerInfoEl.appendChild(playerCard);
            });
        }

        /**
         * Renderiza el tablero de juego con todas las casillas y las fichas.
         */
        function renderBoard() {
            gameBoardEl.innerHTML = '';
            game.board.forEach((square, index) => {
                const squareEl = document.createElement('div');
                squareEl.id = `square-${index}`;
                squareEl.className = `square ${square.type}`;

                // Prioridad: Imagen custom, luego Emoji, luego Icono de Font Awesome (fallback)
                if (square.image) {
                    const imgEl = document.createElement('img');
                    imgEl.src = square.image;
                    imgEl.alt = square.text;
                    imgEl.className = 'cosiaca-image';
                    squareEl.appendChild(imgEl);
                } else if (square.emoji) {
                    const emojiEl = document.createElement('span');
                    emojiEl.className = 'square-emoji';
                    emojiEl.textContent = square.emoji;
                    squareEl.appendChild(emojiEl);
                } else if (square.icon) {
                    const iconEl = document.createElement('i');
                    iconEl.className = `${square.icon} square-icon`; // Usar square-icon para Font Awesome
                    squareEl.appendChild(iconEl);
                }

                const textEl = document.createElement('div');
                textEl.className = 'square-text';
                textEl.textContent = square.text;
                squareEl.appendChild(textEl);

                // Contenedor para las fichas en la casilla
                const tokensContainer = document.createElement('div');
                tokensContainer.className = 'tokens-container';
                squareEl.appendChild(tokensContainer);

                // Añadir fichas a las casillas
                game.players.forEach(player => {
                    player.tokens.forEach(token => {
                        if (token.position === index && !token.inGoal) {
                            const tokenEl = document.createElement('div');
                            tokenEl.id = token.id;
                            tokenEl.className = `token ${player.id}`;
                            tokenEl.style.backgroundColor = player.color;
                            tokenEl.textContent = token.id.slice(-1); // Muestra el número de ficha (e.g., '1', '2')

                            // Si la ficha está en la comisaría, muestra los turnos restantes
                            if (token.inJail && game.jailTurns[player.id] && game.jailTurns[player.id][token.id] !== undefined) {
                                const jailTurnsLeft = game.jailTurns[player.id][token.id];
                                const jailIndicator = document.createElement('span');
                                jailIndicator.className = 'jail-turns-indicator';
                                jailIndicator.textContent = `(${jailTurnsLeft})`;
                                tokenEl.appendChild(jailIndicator);
                            }

                            tokensContainer.appendChild(tokenEl);

                            // Añadir listener para seleccionar ficha si es el turno de selección
                            if (game.turnPhase === 'selectToken' && player.id === game.players[game.currentPlayerIndex].id) {
                                tokenEl.classList.add('cursor-pointer', 'hover:scale-110');
                                tokenEl.onclick = () => selectToken(player, token.id);
                            }
                        }
                    });
                });

                gameBoardEl.appendChild(squareEl);
            });
        }

        /**
         * Renderiza tanto la información del jugador como el tablero.
         * Esta función se usa para actualizar la UI completa relacionada con los jugadores.
         */
        function renderPlayers() {
            renderPlayerInfo();
            renderBoard();
        }

        /**
         * Actualiza el mensaje en la caja de mensajes del juego.
         * @param {string} msg - El mensaje a mostrar.
         */
        function updateMessageBox(msg) {
            game.message = msg;
            messageBox.textContent = msg;
        }

        /**
         * Lanza los dados y actualiza el estado del juego.
         */
        async function rollDice() {
            if (game.turnPhase !== 'rollDice') return;

            rollDiceButton.disabled = true;
            die1El.classList.add('rolling');
            die2El.classList.add('rolling');
            updateMessageBox('¡Lanzando los dados!');

            // Simulate dice roll animation
            let animationInterval = setInterval(() => {
                die1El.textContent = Math.floor(Math.random() * 6) + 1;
                die2El.textContent = Math.floor(Math.random() * 6) + 1;
            }, 100);

            await new Promise(resolve => setTimeout(resolve, 1000)); // Animation duration

            clearInterval(animationInterval); // Stop animation

            const roll1 = Math.floor(Math.random() * 6) + 1;
            const roll2 = Math.floor(Math.random() * 6) + 1;
            game.diceRoll = [roll1, roll2];
            die1El.textContent = roll1;
            die2El.textContent = roll2;
            die1El.classList.remove('rolling');
            die2El.classList.remove('rolling');

            const currentPlayer = game.players[game.currentPlayerIndex];

            let movedFromJailThisTurn = false;
            let playerHasActiveJailedTokens = false;

            // Check if any token of the current player is in jail
            for (const token of currentPlayer.tokens) {
                if (token.inJail && game.jailTurns[currentPlayer.id] && game.jailTurns[currentPlayer.id][token.id] !== undefined) {
                    playerHasActiveJailedTokens = true;
                    // If doubles, token gets out of jail immediately
                    if (game.diceRoll[0] === game.diceRoll[1]) {
                        token.inJail = false;
                        delete game.jailTurns[currentPlayer.id][token.id];
                        updateMessageBox(`¡${currentPlayer.name} sacó dobles y sale de La Comisaría con ficha ${token.id.slice(-1)}!`);
                        game.tokensToMove = game.diceRoll[0] + game.diceRoll[1]; // Can move after getting out
                        game.turnPhase = 'selectToken';
                        movedFromJailThisTurn = true;
                        break; // Only one token can get out by doubles per roll
                    } else {
                        game.jailTurns[currentPlayer.id][token.id]--; // Decrement turns
                        if (game.jailTurns[currentPlayer.id][token.id] <= 0) {
                            // Turns served: token gets out of jail
                            token.inJail = false;
                            delete game.jailTurns[currentPlayer.id][token.id];
                            updateMessageBox(`¡${currentPlayer.name} sale de La Comisaría con ficha ${token.id.slice(-1)} después de sus turnos!`);
                            game.tokensToMove = game.diceRoll[0] + game.diceRoll[1]; // Can move after getting out
                            game.turnPhase = 'selectToken';
                            movedFromJailThisTurn = true;
                            break; // Only one token can get out by serving turns per roll
                        } else {
                            // Token remains in jail
                            updateMessageBox(`¡La ficha ${token.id.slice(-1)} de ${currentPlayer.name} sigue en La Comisaría! Le quedan ${game.jailTurns[currentPlayer.id][token.id]} turnos.`);
                            // If a token is stuck, the player's turn for movement ends
                            game.turnPhase = 'endTurn';
                            break; // No need to check other tokens if one is stuck
                        }
                    }
                }
            }

            if (playerHasActiveJailedTokens && !movedFromJailThisTurn) {
                // If the player had tokens in jail and none got out, end the turn.
                endTurn();
                return;
            } else if (movedFromJailThisTurn) {
                // If a token got out of jail, proceed to select that token.
                renderBoard();
                highlightMovableTokens();
                return;
            }

            // Logic for normal turns (when no tokens are in jail or all got out)
            const totalRoll = game.diceRoll[0] + game.diceRoll[1];
            const isDouble = game.diceRoll[0] === game.diceRoll[1];

            if (isDouble) {
                game.doubleRollsCount++;
                if (game.doubleRollsCount === 3) {
                    updateMessageBox(`¡${currentPlayer.name} sacó 3 dobles consecutivos! Todas sus fichas van a La Comisaría.`);
                    // Move all tokens to jail
                    currentPlayer.tokens.forEach(token => {
                        sendToJail(currentPlayer, token); // Use sendToJail function
                    });
                    game.doubleRollsCount = 0; // Reset doubles counter
                    game.turnPhase = 'endTurn';
                    renderBoard();
                    endTurn();
                    return;
                } else {
                    updateMessageBox(`¡${currentPlayer.name} sacó dobles (${totalRoll})! Vuelve a lanzar.`);
                    game.turnPhase = 'selectToken';
                    game.tokensToMove = totalRoll;
                }
            } else {
                game.doubleRollsCount = 0; // Reset doubles counter if not doubles
                game.turnPhase = 'selectToken';
                game.tokensToMove = totalRoll;
                updateMessageBox(`¡${currentPlayer.name} sacó ${totalRoll}! Selecciona una ficha para mover.`);
            }

            renderBoard();
            highlightMovableTokens();
        }

        /**
         * Resalta las fichas que pueden ser movidas por el jugador actual.
         */
        function highlightMovableTokens() {
            const currentPlayer = game.players[game.currentPlayerIndex];
            currentPlayer.tokens.forEach(token => {
                // Only highlight tokens that are not in goal or in jail
                if (!token.inGoal && !token.inJail) {
                    const tokenEl = document.getElementById(token.id);
                    if (tokenEl) {
                        tokenEl.classList.add('cursor-pointer', 'hover:scale-110');
                        tokenEl.onclick = () => selectToken(currentPlayer, token.id);
                    }
                    // Highlight the token's square
                    const currentSquareEl = document.getElementById(`square-${token.position}`);
                    if (currentSquareEl) {
                        currentSquareEl.classList.add('current-player-highlight');
                    }
                }
            });
        }

        /**
         * Maneja la selección de una ficha para mover.
         * @param {object} player - El objeto del jugador.
         * @param {string} tokenId - El ID de la ficha seleccionada.
         */
        function selectToken(player, tokenId) {
            if (game.turnPhase !== 'selectToken') return;

            // Remove highlight from all tokens and their squares
            game.players.forEach(p => {
                p.tokens.forEach(t => {
                    const tokenEl = document.getElementById(t.id);
                    if (tokenEl) {
                        tokenEl.classList.remove('cursor-pointer', 'hover:scale-110');
                        tokenEl.onclick = null;
                    }
                    const squareEl = document.getElementById(`square-${t.position}`);
                    if (squareEl) {
                        squareEl.classList.remove('current-player-highlight');
                    }
                });
            });

            player.selectedTokenId = tokenId;
            updateMessageBox(`¡${player.name} seleccionó la ficha ${tokenId.slice(-1)}! Moviendo...`);
            moveToken(player, tokenId, game.tokensToMove);
        }

        /**
         * Mueve una ficha a una nueva posición en el tablero.
         * @param {object} player - El objeto del jugador.
         * @param {string} tokenId - El ID de la ficha a mover.
         * @param {number} steps - Número de pasos a mover (positivo para avanzar, negativo para retroceder).
         */
        function moveToken(player, tokenId, steps) {
            const token = player.tokens.find(t => t.id === tokenId);
            if (!token || token.inGoal) return; // No mover si ya está en la meta

            let newPosition = token.position + steps;

            // Ensure token does not go below 0
            if (newPosition < 0) {
                newPosition = 0;
            }

            // If token overshoots the goal, it lands exactly on the goal
            if (newPosition >= game.board.length - 1) {
                token.position = game.board.length - 1;
                token.inGoal = true;
                player.tokensInGoal++;
                updateMessageBox(`¡${player.name} ha llegado a la meta con una ficha!`);
                renderBoard(); // Render before checking win condition
                checkWinCondition();
                return; // End function here if token reached goal
            } else {
                token.position = newPosition;
            }

            renderBoard();
            handleSquareAction(player, token);
        }

        /**
         * Maneja la acción de la casilla donde cayó la ficha.
         * @param {object} player - El objeto del jugador.
         * @param {object} token - El objeto de la ficha.
         */
        async function handleSquareAction(player, token) {
            const currentSquare = game.board[token.position];
            game.turnPhase = 'cardAction'; // Change phase to wait for card action
            rollDiceButton.disabled = true; // Disable dice roll button

            switch (currentSquare.type) {
                case 'historical':
                    await showFactCard(currentSquare.factPrompt);
                    break;
                case 'cosiaca':
                    await showRandomCard(game.encuentroCards, player, token); // Pass the token
                    break;
                case 'event':
                    await showRandomCard(game.eventosCards, player, token); // Pass the token
                    break;
                case 'jail':
                    updateMessageBox(`¡${player.name} cayó en La Comisaría con ficha ${token.id.slice(-1)}! Pierde 2 turnos.`);
                    sendToJail(player, token); // Use sendToJail function
                    game.turnPhase = 'endTurn'; // End turn after going to jail
                    endTurn();
                    break;
                case 'safe':
                    updateMessageBox(`¡${player.name} está en una casilla de Seguro con ficha ${token.id.slice(-1)}! Estás a salvo.`);
                    game.turnPhase = 'endTurn';
                    endTurn();
                    break;
                case 'start-zone':
                case 'goal-zone':
                    // No special action for these squares when landing on them
                    game.turnPhase = 'endTurn';
                    endTurn();
                    break;
            }
            // If the square action is not a card or historical fact, the turn ends here.
            // Card/historical fact actions will call endTurn() via executeCardAction() or closeModalAndEndTurn().
        }

        /**
         * Envía una ficha a la comisaría.
         * @param {object} player - El objeto del jugador.
         * @param {object} token - El objeto de la ficha a enviar a la comisaría.
         */
        function sendToJail(player, token) {
            // Find the first jail square
            const jailSquareIndex = game.board.findIndex(square => square.type === 'jail');
            if (jailSquareIndex !== -1) {
                token.position = jailSquareIndex;
                token.inJail = true;
                game.jailTurns[player.id][token.id] = 2; // 2 turns in jail
                renderBoard();
                renderPlayerInfo();
            } else {
                console.error("No jail square found on the board!");
            }
        }

        /**
         * Muestra una tarjeta de hecho histórico usando la API de Gemini.
         * @param {string} prompt - El prompt para generar el hecho histórico.
         */
        async function showFactCard(prompt) {
            showModal('Cargando...', 'Obteniendo información histórica...', true);
            try {
                const chatHistory = [{ role: "user", parts: [{ text: `Dame un hecho histórico corto y divertido sobre ${prompt} en Medellín, Colombia. Máximo 2 oraciones.` }] }];
                const payload = { contents: chatHistory };
                const apiKey = ""; // The API key will be injected at runtime
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const result = await response.json();

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const fact = result.candidates[0].content.parts[0].text;
                    modalTitleEl.textContent = `Hecho Histórico: ${prompt}`;
                    modalBodyEl.textContent = fact;
                    modalImageEl.classList.add('hidden'); // Hide image if none
                } else {
                    modalTitleEl.textContent = `Hecho Histórico: ${prompt}`;
                    modalBodyEl.textContent = "No se pudo obtener el hecho histórico. ¡Pero seguro fue algo importante!";
                    modalImageEl.classList.add('hidden');
                }
            } catch (error) {
                console.error("Error al obtener el hecho histórico:", error);
                modalTitleEl.textContent = `Hecho Histórico: ${prompt}`;
                modalBodyEl.textContent = "Hubo un error al cargar el hecho histórico. ¡La historia está llena de misterios!";
                modalImageEl.classList.add('hidden');
            } finally {
                modalLoadingEl.classList.add('hidden');
                modalActionsEl.innerHTML = '<button onclick="closeModalAndEndTurn()">Entendido</button>';
            }
        }

        /**
         * Muestra una tarjeta aleatoria de un mazo dado.
         * @param {Array} cardDeck - El mazo de cartas (encuentroCards o eventosCards).
         * @param {object} player - El jugador actual.
         * @param {object} token - La ficha que activó la carta.
         */
        function showRandomCard(cardDeck, player, token) {
            const randomIndex = Math.floor(Math.random() * cardDeck.length);
            const card = cardDeck[randomIndex];

            showModal(card.title, card.description, false, card.image);
            modalActionsEl.innerHTML = '<button onclick="executeCardAction()">Aceptar</button>';

            // Store the card action to execute it when closing the modal
            game.currentCardAction = () => {
                card.action(player, token); // Pass both player and token
                game.turnPhase = 'endTurn';
                endTurn();
            };
        }

        /**
         * Ejecuta la acción de la carta actual y cierra el modal.
         */
        function executeCardAction() {
            if (game.currentCardAction) {
                game.currentCardAction();
                game.currentCardAction = null; // Clear the action
            }
            gameModal.style.display = 'none';
        }

        /**
         * Muestra el modal del juego con el contenido especificado.
         * @param {string} title - Título del modal.
         * @param {string} body - Contenido del modal.
         * @param {boolean} showLoading - Si se debe mostrar el spinner de carga.
         * @param {string} imageUrl - URL de la imagen a mostrar en el modal (opcional).
         */
        function showModal(title, body, showLoading = false, imageUrl = '') {
            gameModal.style.display = 'flex';
            modalTitleEl.textContent = title;
            modalBodyEl.textContent = body;
            modalLoadingEl.classList.toggle('hidden', !showLoading);
            modalActionsEl.innerHTML = ''; // Clear previous actions

            if (imageUrl) {
                modalImageEl.src = imageUrl;
                modalImageEl.classList.remove('hidden');
            } else {
                modalImageEl.classList.add('hidden');
                modalImageEl.src = ''; // Clear src to prevent showing a previous image
            }
        }

        /**
         * Cierra el modal del juego y finaliza el turno.
         */
        function closeModalAndEndTurn() {
            gameModal.style.display = 'none';
            game.turnPhase = 'endTurn';
            endTurn();
        }

        /**
         * Comprueba si algún jugador ha ganado.
         */
        function checkWinCondition() {
            const currentPlayer = game.players[game.currentPlayerIndex];
            if (currentPlayer.tokensInGoal === currentPlayer.tokens.length) {
                updateMessageBox(`¡Felicidades, ${currentPlayer.name}! ¡Has llevado a toda tu familia a la meta y ganado el juego!`);
                rollDiceButton.disabled = true;
                game.gameStarted = false;
                showModal('¡Juego Terminado!', `¡Felicidades, ${currentPlayer.name}! ¡Has llevado a todas tus fichas a la meta y ganado el juego!`, false, 'https://placehold.co/150x150/4CAF50/FFFFFF?text=Ganador');
                modalActionsEl.innerHTML = '<button onclick="location.reload()">Jugar de Nuevo</button>';
            }
        }

        /**
         * Pasa el turno al siguiente jugador.
         */
        function endTurn() {
            if (!game.gameStarted) return; // Do not pass turn if game has ended

            game.currentPlayerIndex = (game.currentPlayerIndex + 1) % game.numPlayers;
            game.turnPhase = 'rollDice'; // Reset turn phase
            rollDiceButton.disabled = false;
            updateMessageBox(`¡Turno de ${game.players[game.currentPlayerIndex].name}! Lanza los dados.`);
            renderPlayerInfo();
            renderBoard(); // Re-render board to clear highlights
            saveGameState(); // Save game state at the end of each turn
        }

        // Firebase functions for saving and loading game state
        async function saveGameState() {
            if (!userId) {
                console.error("User not authenticated. Cannot save game state.");
                return;
            }
            try {
                const gameRef = doc(db, `artifacts/${appId}/users/${userId}/medellin_game`, 'current_game');
                await setDoc(gameRef, {
                    players: JSON.stringify(game.players), // Serialize array of objects
                    currentPlayerIndex: game.currentPlayerIndex,
                    doubleRollsCount: game.doubleRollsCount,
                    jailTurns: JSON.stringify(game.jailTurns), // Serialize jailTurns object
                    timestamp: new Date()
                });
                console.log("Game state saved!");
            } catch (error) {
                console.error("Error saving game state:", error);
            }
        }

        async function loadGameState() {
            if (!userId) {
                console.error("User not authenticated. Cannot load game state.");
                return;
            }
            try {
                const gameRef = doc(db, `artifacts/${appId}/users/${userId}/medellin_game`, 'current_game');
                const docSnap = await getDoc(gameRef);

                if (docSnap.exists()) {
                    const data = docSnap.data();
                    game.players = JSON.parse(data.players); // Deserialize array of objects
                    game.currentPlayerIndex = data.currentPlayerIndex;
                    game.doubleRollsCount = data.doubleRollsCount || 0; // Ensure it's initialized
                    game.jailTurns = JSON.parse(data.jailTurns || '{}'); // Deserialize jailTurns
                    renderPlayers(); // Render players based on loaded state
                    game.gameStarted = true;
                    updateMessageBox(`¡Juego cargado! Turno de ${game.players[game.currentPlayerIndex].name}.`);
                    rollDiceButton.disabled = false;
                    console.log("Game state loaded!");
                } else {
                    console.log("No saved game state found. Starting new game.");
                    initializePlayers();
                    saveGameState(); // Save initial state
                }
            } catch (error) {
                console.error("Error loading game state:", error);
                initializePlayers(); // Fallback to new game on error
                saveGameState();
            } finally {
                // Ensure the game is ready to be played even if there was an error loading
                game.gameStarted = true;
                rollDiceButton.disabled = false;
            }
        }

        // Event Listeners
        rollDiceButton.addEventListener('click', rollDice);

        // Initialize Firebase Auth and load game state
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                console.log("Authenticated as:", userId);
                await loadGameState();
            } else {
                // Sign in anonymously if no user is found
                try {
                    if (typeof __initial_auth_token !== 'undefined') {
                        await signInWithCustomToken(auth, __initial_auth_token);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Error during anonymous sign-in:", error);
                    // If anonymous sign-in fails, proceed without a user ID (game won't save)
                    userId = null;
                    game.gameStarted = true; // Still allow game to be played
                    initializePlayers(); // Initialize players even if not authenticated
                    updateMessageBox(`¡Turno de ${game.players[game.currentPlayerIndex].name}! Lanza los dados.`);
                    console.warn("Game will run without persistence due to authentication error.");
                }
            }
        });

        // Initialize board on window load
        window.onload = () => {
            renderBoard(); // Initial render of the empty board structure
            // Authentication listener will handle loading game state or initializing new game
        };

        // Expose functions to global scope for onclick attributes in modal
        window.executeCardAction = () => executeCardAction();
        window.closeModalAndEndTurn = () => closeModalAndEndTurn();
    </script>
</body>
</html>
